{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Metadata": {
        "cfn-lint": {
            "config": {
                "ignore_checks": [
                    "E9008"
                ],
                "ignore_reasons": {
                    "E9008": "No QSID for this template"
                }
            }
        },
        "AWS::CloudFormation::Interface": {
            "ParameterLabels": {
                "UptycsAPIKey": {
                    "default": "The Uptycs API Key value from your credentials file"
                },
                "UptycsSecret": {
                    "default": "The Uptycs API Secret value from your credentials file"
                },
                "UptycsCustomerId": {
                    "default": "The Uptycs API Customer ID value from your credentials file"
                },
                "UptycsDomain": {
                    "default": "The Uptycs API Domain value from your credentials file"
                },
                "UptycsDomainSuffix": {
                    "default": "The Uptycs API Domain suffix"
                },
                "UptycsKeysParameterStoreName": {
                    "default": "The Name of the Systems Manager Parameter Store (Change if required)"
                },
                "UptycsAccountId": {
                    "default": "The Uptycs Account (Do not change unless instructed to do so)"
                },
                "UptycsRoleName": {
                    "default": "The name of the Role that Uptycs will assume in your account"
                },
                "PermissionsBoundary": {
                    "default": "The name of the permissions boundary to apply to IAM roles"
                },
                "CloudTrailBucketName": {
                    "default": "The cloudtrail bucket name normally aws-controltower-xxxx"
                },
                "CloudTrailBucketRegion": {
                    "default": "The region where cloudtrail bucket is located"
                },
                "CloudTrailBucketLogPrefix": {
                    "default": "The region where cloudtrail bucket is located"
                },
                "KMSKeyArn": {
                    "default": "Add the SSE-KMS Arn if using KMS encryption.  Leave blank if using SSE-S3"
                },
                "UptycsStackSetName": {
                    "default": "The Name of the Uptycs StackSet that will be created"
                },
                "ExistingAccounts": {
                    "default": "Select yes to create a stack instance in all existing accounts"
                },
                "S3BucketName": {
                    "default": "The S3 bucket containing Uptycs Source files"
                },
                "S3KeyPrefix": {
                    "default": "The S3 bucket prefix for the source files"
                }
            },
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Uptycs API Permissions"
                    },
                    "Parameters": [
                        "UptycsAPIKey",
                        "UptycsSecret",
                        "UptycsCustomerId",
                        "UptycsDomain",
                        "UptycsDomainSuffix"
                    ]
                },
                {
                    "Label": {
                        "default": "Log Archive Account Parameters"
                    },
                    "Parameters": [
                        "CloudTrailAccount",
                        "CloudTrailBucketName",
                        "CloudTrailBucketRegion",
                        "CloudTrailBucketLogPrefix",
                        "KMSKeyArn"
                    ]
                },
                {
                    "Label": {
                        "default": "AWS Related Configuration"
                    },
                    "Parameters": [
                        "UptycsAccountId",
                        "UptycsRoleName",
                        "PermissionsBoundary",
                        "UptycsKeysParameterStoreName"
                    ]
                },
                {
                    "Label": {
                        "default": "Stackset Related Information"
                    },
                    "Parameters": [
                        "UptycsStackSetName",
                        "ExistingAccounts"
                    ]
                },
                {
                    "Label": {
                        "default": "Source file bucket Parameters (Change of self hosting)"
                    },
                    "Parameters": [
                        "S3BucketName",
                        "S3KeyPrefix"
                    ]
                }
            ]
        }
    },
    "Parameters": {
        "UptycsKeysParameterStoreName": {
            "Description": "Uptycs API Key Parameter Store Name",
            "Type": "String",
            "Default": "/uptycs"
        },
        "UptycsAPIKey": {
            "Description": "Uptycs API Key",
            "Type": "String",
            "NoEcho": true
        },
        "UptycsSecret": {
            "Description": "Uptycs API Secret",
            "Type": "String",
            "NoEcho": true
        },
        "UptycsCustomerId": {
            "Description": "Uptycs API CustomerId",
            "Type": "String",
            "NoEcho": true
        },
        "UptycsDomain": {
            "Description": "Uptycs Domain",
            "Type": "String",
            "NoEcho": true
        },
        "UptycsDomainSuffix": {
            "Description": "Uptycs Domain",
            "Type": "String",
            "NoEcho": true
        },
        "UptycsAccountId": {
            "Description": "Aws account id of Uptycs",
            "Type": "String",
            "Default": "031552911331"
        },
        "UptycsRoleName": {
            "Type": "String",
            "Description": "Name for Uptycs CSPM Reader Role",
            "Default": "UptycsIntegrationRole"
        },
        "S3BucketName": {
            "Type": "String",
            "Description": "Name of the zip file bucket",
            "Default": "uptycs-cloud-integrations-test"
        },
        "S3KeyPrefix": {
            "Type": "String",
            "Description": "Prefix for the zip files",
            "Default": "uptycs-control-tower"
        },
        "UptycsStackSetName": {
            "Type": "String",
            "Description": "The StackSet name",
            "Default": "Uptycs-Integration-StackSet"
        },
        "ExistingAccounts": {
            "Type": "String",
            "Description": "Add Stack Instance to each existing account in the org",
            "Default": "No",
            "AllowedValues": [
                "Yes",
                "No"
            ]
        },
        "CloudTrailAccount": {
            "Type": "String",
            "Description": "Name of your cloudtrail bucket"
        },
        "CloudTrailBucketName": {
            "Type": "String",
            "Description": "Name of your cloudtrail bucket"
        },
        "CloudTrailBucketRegion": {
            "Type": "String",
            "Description": "Cloudtrail bucket region"
        },
        "CloudTrailBucketLogPrefix": {
            "Type": "String",
            "Description": "Cloudtrail bucket region"
        },
        "KMSKeyArn": {
            "Description": "SSE-KMS Arn .",
            "Default": "",
            "Type": "String"
        },
        "PermissionsBoundary": {
            "Description": "The name of the permission boundary for all roles created by this template.",
            "Type": "String",
            "Default": ""
        }
    },
    "Conditions": {
        "PermissionsBoundary": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "PermissionsBoundary"
                        },
                        ""
                    ]
                }
            ]
        }
    },
    "Resources": {
        "UptycsRegistrationLambda": {
            "Type": "AWS::Lambda::Function",
            "DependsOn": [
                "WriteSecretToParameterStoreCustomResource",
                "UptycsSetupCustomResource"
            ],
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "LambdaZipsBucket"
                    },
                    "S3Key": {
                        "Fn::Sub": "${S3KeyPrefix}/lambda/UptycsRegistrationHandler-0.0.1.zip"
                    }
                },
                "Environment": {
                    "Variables": {
                        "UPTYCS_PARAM_STORE": {
                            "Ref": "UptycsKeysParameterStoreName"
                        }
                    }
                },
                "Handler": "uptycs_account_registration.lambda_handler",
                "Runtime": "python3.7",
                "Timeout": 500,
                "Role": {
                    "Fn::GetAtt": [
                        "UptycsAccountFunctionRole",
                        "Arn"
                    ]
                }
            }
        },
        "RegisterAcct": {
            "DependsOn": "UptycsSetupCustomResource",
            "Type": "Custom::UptycsRegistration",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "UptycsRegistrationLambda",
                        "Arn"
                    ]
                },
                "role_name": {
                    "Ref": "UptycsRoleName"
                },
                "ctaccount": {
                    "Ref": "CloudTrailAccount"
                },
                "ctprefix": {
                    "Ref": "CloudTrailBucketLogPrefix"
                },
                "ctbucket": {
                    "Ref": "CloudTrailBucketName"
                },
                "ctregion": {
                    "Ref": "CloudTrailBucketRegion"
                }
            }
        },
        "LambdaZipsBucket": {
            "Type": "AWS::S3::Bucket"
        },
        "CopyZips": {
            "Type": "Custom::CopyZips",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CopyZipsFunction",
                        "Arn"
                    ]
                },
                "DestBucket": {
                    "Ref": "LambdaZipsBucket"
                },
                "SourceBucket": {
                    "Ref": "S3BucketName"
                },
                "Prefix": {
                    "Ref": "S3KeyPrefix"
                },
                "Objects": [
                    "/lambda/UptycsSetupHandler-0.0.1.zip",
                    "/lambda/UptycsAccountHandler-0.0.1.zip",
                    "/lambda/UptycsRegistrationHandler-0.0.1.zip",
                    "/templates/uptycs-bucket-policy.json",
                    "/templates/log_acct_template.json",
                    "/templates/member_acct_template.json"
                ]
            }
        },
        "CopyZipsRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "PermissionsBoundary": {
                    "Fn::If": [
                        "PermissionsBoundary",
                        {
                            "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${PermissionsBoundary}"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    {
                        "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                    }
                ],
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "lambda-copier",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:GetObject",
                                        "s3:GetObjectTagging"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:s3:::${S3BucketName}/${S3KeyPrefix}*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:PutObject",
                                        "s3:DeleteObject",
                                        "s3:PutObjectTagging"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:s3:::${LambdaZipsBucket}/${S3KeyPrefix}*"
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "CopyZipsFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description": "Copies objects from the S3 bucket to a new location.",
                "Handler": "index.handler",
                "Runtime": "python3.7",
                "Role": {
                    "Fn::GetAtt": [
                        "CopyZipsRole",
                        "Arn"
                    ]
                },
                "Timeout": 240,
                "Code": {
                    "ZipFile": "import json\nimport logging\nimport threading\nimport boto3\nimport cfnresponse\ndef copy_objects(source_bucket, dest_bucket, prefix, objects):\n    s3 = boto3.client('s3')\n    for o in objects:\n        key = prefix + o\n        copy_source = {\n            'Bucket': source_bucket,\n            'Key': key\n        }\n        print('copy_source: %s' % copy_source)\n        print('dest_bucket = %s'%dest_bucket)\n        print('key = %s' %key)\n        s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,\n              Key=key)\ndef delete_objects(bucket, prefix, objects):\n    s3 = boto3.client('s3')\n    objects = {'Objects': [{'Key': prefix + o} for o in objects]}\n    s3.delete_objects(Bucket=bucket, Delete=objects)\ndef timeout(event, context):\n    logging.error('Execution is about to time out, sending failure response to CloudFormation')\n    cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)\ndef handler(event, context):\n    # make sure we send a failure to CloudFormation if the function\n    # is going to timeout\n    timer = threading.Timer((context.get_remaining_time_in_millis()\n              / 1000.00) - 0.5, timeout, args=[event, context])\n    timer.start()\n    print('Received event: %s' % json.dumps(event))\n    status = cfnresponse.SUCCESS\n    try:\n        source_bucket = event['ResourceProperties']['SourceBucket']\n        dest_bucket = event['ResourceProperties']['DestBucket']\n        prefix = event['ResourceProperties']['Prefix']\n        objects = event['ResourceProperties']['Objects']\n        if event['RequestType'] == 'Delete':\n            delete_objects(dest_bucket, prefix, objects)\n        else:\n            copy_objects(source_bucket, dest_bucket, prefix, objects)\n    except Exception as e:\n        logging.error('Exception: %s' % e, exc_info=True)\n        status = cfnresponse.FAILED\n    finally:\n        timer.cancel()\n        cfnresponse.send(event, context, status, {}, None)\n"
                }
            }
        },
        "UptycsAccountSNS": {
            "Type": "AWS::SNS::Topic"
        },
        "UptycsAccountFunctionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "PermissionsBoundary": {
                    "Fn::If": [
                        "PermissionsBoundary",
                        {
                            "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${PermissionsBoundary}"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "Account_Operations",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Sid": "StackSetInstanceOperations",
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudformation:CreateStackInstances",
                                        "cloudformation:ListStackInstances",
                                        "cloudformation:ListStackSetOperations",
                                        "cloudformation:DescribeStackSetOperation",
                                        "cloudformation:DeleteStackInstances",
                                        "cloudformation:DescribeStackSet"
                                    ],
                                    "Resource": {
                                        "Fn::Sub": "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stackset/Uptycs*"
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ssm:GetParameterHistory",
                                        "ssm:GetParameter"
                                    ],
                                    "Resource": {
                                        "Fn::Sub": "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter${UptycsKeysParameterStoreName}"
                                    }
                                },
                                {
                                    "Sid": "SNSOperations",
                                    "Effect": "Allow",
                                    "Action": [
                                        "sns:Publish"
                                    ],
                                    "Resource": [
                                        {
                                            "Ref": "UptycsAccountSNS"
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "ManagedPolicyArns": [
                    {
                        "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                    },
                    {
                        "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/AWSOrganizationsReadOnlyAccess"
                    }
                ]
            }
        },
        "CreateAccountRule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "Description": "Event rule for CreateManagedAccount events",
                "EventPattern": {
                    "source": [
                        "aws.organizations"
                    ],
                    "detail-type": [
                        "AWS API Call via CloudTrail"
                    ],
                    "detail": {
                        "eventSource": [
                            "organizations.amazonaws.com"
                        ],
                        "eventName": [
                            "CreateManagedAccount",
                            "UpdateManagedAccount"
                        ]
                    }
                },
                "Targets": [
                    {
                        "Arn": {
                            "Fn::GetAtt": [
                                "UptycsAccountFunction",
                                "Arn"
                            ]
                        },
                        "Id": "AccountFunctionTarget"
                    }
                ]
            }
        },
        "UptycsAccountFunction": {
            "Type": "AWS::Lambda::Function",
            "DependsOn": "CopyZips",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "LambdaZipsBucket"
                    },
                    "S3Key": {
                        "Fn::Sub": "${S3KeyPrefix}/lambda/UptycsAccountHandler-0.0.1.zip"
                    }
                },
                "Handler": "uptycs_account_handler.lambda_handler",
                "Runtime": "python3.7",
                "Timeout": 500,
                "Environment": {
                    "Variables": {
                        "PERMISSIONS_BOUNDARY": {
                            "Ref": "PermissionsBoundary"
                        },
                        "UPTYCS_STACKSET_NAME": {
                            "Ref": "UptycsStackSetName"
                        },
                        "UptycsKeysParameterStoreName": {
                            "Ref": "UptycsKeysParameterStoreName"
                        },
                        "uptycs_account_topic": {
                            "Ref": "UptycsAccountSNS"
                        }
                    }
                },
                "Role": {
                    "Fn::GetAtt": [
                        "UptycsAccountFunctionRole",
                        "Arn"
                    ]
                }
            }
        },
        "UptycsAccountSNSLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "UptycsAccountFunction",
                        "Arn"
                    ]
                },
                "Principal": "sns.amazonaws.com",
                "SourceArn": {
                    "Ref": "UptycsAccountSNS"
                }
            }
        },
        "UptycsAccountSNSSubscription": {
            "Type": "AWS::SNS::Subscription",
            "Properties": {
                "Endpoint": {
                    "Fn::GetAtt": [
                        "UptycsAccountFunction",
                        "Arn"
                    ]
                },
                "Protocol": "lambda",
                "TopicArn": {
                    "Ref": "UptycsAccountSNS"
                }
            }
        },
        "UptycsDLQ": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
                "MessageRetentionPeriod": 1209600
            }
        },
        "WriteSecretToParameterStoreCustomResource": {
            "Type": "Custom::WriteSecretToParameterStore",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "WriteSecretToParameterStoreLambda",
                        "Arn"
                    ]
                },
                "parameter_name": {
                    "Ref": "UptycsKeysParameterStoreName"
                },
                "SecretData": {
                    "key": {
                        "Ref": "UptycsAPIKey"
                    },
                    "secret": {
                        "Ref": "UptycsSecret"
                    },
                    "customerId": {
                        "Ref": "UptycsCustomerId"
                    },
                    "domain": {
                        "Ref": "UptycsDomain"
                    },
                    "domainSuffix": {
                        "Ref": "UptycsDomainSuffix"
                    },
                    "uptycs_role_name": {
                        "Ref": "UptycsRoleName"
                    },
                    "uptycs_account_id": {
                        "Ref": "UptycsAccountId"
                    }
                }
            }
        },
        "WriteParameterExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "PermissionsBoundary": {
                    "Fn::If": [
                        "PermissionsBoundary",
                        {
                            "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:policy/${PermissionsBoundary}"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "ManagedPolicyArns": [
                    {
                        "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                    }
                ],
                "Policies": [
                    {
                        "PolicyName": "SSMParameterStoreWriteAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ssm:PutParameter",
                                        "ssm:DeleteParameter",
                                        "ssm:GetParameterHistory",
                                        "ssm:GetParameter"
                                    ],
                                    "Resource": {
                                        "Fn::Sub": "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter${UptycsKeysParameterStoreName}"
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "WriteSecretToParameterStoreLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "index.lambda_handler",
                "MemorySize": 512,
                "Runtime": "python3.8",
                "Role": {
                    "Fn::GetAtt": [
                        "WriteParameterExecutionRole",
                        "Arn"
                    ]
                },
                "Timeout": 20,
                "Code": {
                    "ZipFile": "import boto3\nimport cfnresponse\nfrom botocore.exceptions import ClientError\nimport logging\nimport json\nimport uuid\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\nresponse_data = {}\n\ndef generate_uuid():\n  return str(uuid.uuid4())\n\ndef lambda_handler(event, context):\n  ssm = boto3.client('ssm')\n  parameter_name = event['ResourceProperties']['parameter_name']\n  status = cfnresponse.SUCCESS\n  if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':\n    try:\n      external_id = generate_uuid()\n      logger.info('EVENT Received: {}'.format(event))\n      secret_data = event['ResourceProperties']['SecretData']\n      secret_data[\"external_id\"] = external_id\n      response = ssm.put_parameter(\n          Name=parameter_name,\n          Value=json.dumps(secret_data),\n          Type='SecureString',\n          Overwrite=True\n      )\n      logger.info('Created parameter version {}'.format(response.get('Version')))\n      response_data = {\n          'Status': 'SUCCESS',\n          'external_id': external_id,\n          'Reason': 'Created Parameter',\n          'Data': {'Version': response.get('Version')}\n\n      }\n    except ClientError as client_error:\n      logger.info('Client Exception {}'.format(client_error))\n      response_data = {\n          'Status': 'FAILED',\n          'Data': {'Got client error {}'.format(client_error)}\n      }\n      status = cfnresponse.FAILED\n    except Exception as error:\n      response_data = {\n          'Status': 'FAILED',\n          'Data': {'ParameterName': parameter_name}\n      }\n      logger.info('Error Received: {}'.format(error))\n      status = cfnresponse.FAILED\n    finally:\n      cfnresponse.send(event, context, status, response_data)\n      return {'ExternalId': external_id}\n      \n\n  elif event['RequestType'] == 'Delete':\n    try:\n      response = ssm.delete_parameter(\n          Name=parameter_name)\n      logger.info('Deleted Parameter')\n      response_data = {\n                'Status': 'SUCCESS'}\n    except ClientError as client_error:\n      logger.info('Client Exception {}'.format(error))\n      response_data = {\n          'Status': 'FAILED',\n          'Data': {'Got client error {}'.format(client_error)}\n      }\n    except Exception as error:\n      response_data = {\n          'Status': 'FAILED',\n          'Data': {'Got general error'}\n      }\n      logger.info('Failed to delete parameter')\n    finally:\n      cfnresponse.send(event, context, status, response_data)\n"
                }
            }
        },
        "UptycsSetupCustomResource": {
            "Type": "Custom::UptycsSetupCustomResource",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "UptycsSetupLambdaFunction",
                        "Arn"
                    ]
                }
            }
        },
        "UptycsSetupLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "DependsOn": "CopyZips",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "LambdaZipsBucket"
                    },
                    "S3Key": {
                        "Fn::Join": [
                            "",
                            [
                                {
                                    "Ref": "S3KeyPrefix"
                                },
                                "/lambda/UptycsSetupHandler-0.0.1.zip"
                            ]
                        ]
                    }
                },
                "Handler": "uptycs_setup.lambda_handler",
                "Runtime": "python3.7",
                "Timeout": 500,
                "Environment": {
                    "Variables": {
                        "PERMISSIONS_BOUNDARY": {
                            "Ref": "PermissionsBoundary"
                        },
                        "UPTYCS_ROLE_NAME": {
                            "Ref": "UptycsRoleName"
                        },
                        "UPTYCS_POLICY_FILE": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "S3KeyPrefix"
                                    },
                                    "/templates/uptycs-bucket-policy.json"
                                ]
                            ]
                        },
                        "UPTYCS_S3_BUCKET": {
                            "Ref": "LambdaZipsBucket"
                        },
                        "UPTYCS_PARAM_STORE": {
                            "Ref": "UptycsKeysParameterStoreName"
                        },
                        "UPTYCS_ACCOUNT_MGT_TOPIC": {
                            "Ref": "UptycsAccountSNS"
                        },
                        "EXISTING_ACCOUNTS": {
                            "Ref": "ExistingAccounts"
                        },
                        "UPTYCS_MEMBER_ACCOUNT_TEMPLATE_NAME": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "S3KeyPrefix"
                                    },
                                    "/templates/member_acct_template.json"
                                ]
                            ]
                        },
                        "UPTYCS_LOG_ACCOUNT_TEMPLATE_NAME": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "S3KeyPrefix"
                                    },
                                    "/templates/log_acct_template.json"
                                ]
                            ]
                        },
                        "UPTYCS_ACCOUNT_NUMBER": {
                            "Ref": "UptycsAccountId"
                        },
                        "UPTYCS_STACKSET_NAME": {
                            "Ref": "UptycsStackSetName"
                        },
                        "CLOUDTRAIL_BUCKET_NAME": {
                            "Ref": "CloudTrailBucketName"
                        },
                        "KMS_KEY_ARN": {
                            "Ref": "KMSKeyArn"
                        }
                    }
                },
                "Role": {
                    "Fn::GetAtt": [
                        "UptycsSetupFunctionRole",
                        "Arn"
                    ]
                }
            }
        },
        "UptycsSetupFunctionRole": {
            "Type": "AWS::IAM::Role",
            "Metadata": {
                "cfn-lint": {
                    "config": {
                        "ignore_checks": [
                            "EIAMPolicyWildcardResource"
                        ]
                    }
                }
            },
            "Properties": {
                "PermissionsBoundary": {
                    "Fn::If": [
                        "PermissionsBoundary",
                        {
                            "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${PermissionsBoundary}"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "Setup_Operations",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Sid": "StackOperations",
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudformation:ListStacks",
                                        "cloudformation:DescribeStacks",
                                        "cloudformation:DeleteStack",
                                        "cloudformation:CreateStack"
                                    ],
                                    "Resource": {
                                        "Fn::Sub": "arn:${AWS::Partition}:cloudformation:*:*:stack/*"
                                    }
                                },
                                {
                                    "Sid": "StackSetInstance",
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudformation:DescribeStackInstance",
                                        "cloudformation:UpdateStackInstances",
                                        "cloudformation:CreateStackInstances",
                                        "cloudformation:DeleteStackInstances",
                                        "cloudformation:ListStackInstances",
                                        "cloudformation:UpdateStackSet",
                                        "cloudformation:CreateStackSet",
                                        "cloudformation:DeleteStackSet",
                                        "cloudformation:DescribeStackSetOperation",
                                        "cloudformation:DescribeStackSet"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stackset/*:*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:cloudformation:*:*:type/resource/*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:cloudformation:*:*:stackset-target/*"
                                        }
                                    ]
                                },
                                {
                                    "Sid": "S3Ops",
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:ListBucket",
                                        "s3:GetObject"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:s3:::${LambdaZipsBucket}/${S3KeyPrefix}/*"
                                        }
                                    ]
                                },
                                {
                                    "Sid": "SNSOps",
                                    "Effect": "Allow",
                                    "Action": [
                                        "sns:Publish"
                                    ],
                                    "Resource": {
                                        "Ref": "UptycsAccountSNS"
                                    }
                                },
                                {
                                    "Sid": "PassRole",
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:PassRole"
                                    ],
                                    "Resource": {
                                        "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/service-role/AWSControlTowerStackSetRole"
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ssm:GetParameterHistory",
                                        "ssm:GetParameter"
                                    ],
                                    "Resource": {
                                        "Fn::Sub": "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter${UptycsKeysParameterStoreName}"
                                    }
                                },
                                {
                                    "Sid": "OrgAccounts",
                                    "Effect": "Allow",
                                    "Action": [
                                        "organizations:ListAccounts",
                                        "organizations:DescribeAccount",
                                        "organizations:DescribeOrganization",
                                        "organizations:DescribeOrganizationalUnit",
                                        "organizations:ListParents"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Sid": "GetRole",
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:GetRole"
                                    ],
                                    "Resource": {
                                        "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/*"
                                    }
                                },
                                {
                                    "Sid": "CreateRole",
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:GetRole",
                                        "iam:CreateRole",
                                        "iam:DetachRolePolicy",
                                        "iam:DeleteRolePolicy",
                                        "iam:PutRolePolicy",
                                        "iam:GetRolePolicy",
                                        "iam:AttachRolePolicy"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${UptycsRoleName}"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/*"
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "ManagedPolicyArns": [
                    {
                        "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                    }
                ]
            }
        }
    }
}